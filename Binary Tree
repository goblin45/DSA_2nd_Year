#include <stdio.h>
#include <stdlib.h>

typedef struct node {
    int data;
    struct node *right, *left, *up;
} Node;

Node *root = NULL;
void create ();
void insert_left (Node *);
void insert_right (Node *);
void in_display (Node *);
void pre_display (Node *);
void post_display (Node *);
Node *choice (Node *);
void count_node (Node *);
void find_height (Node *);
void net_leaf (Node *);
void net_interal (Node *);
void search (Node *);
int current_height = -1;

int main ()
{
    int option;
    printf ("\n***********MAIN MENU**********");
    printf ("\n1. Create a tree.");
    printf ("\n2. Traverse via NLR.");
    printf ("\n3. Traverse via LNR.");
    printf ("\n4. Traverse via LRN.");
    printf ("\nEnter -1 to exit.");
    printf ("\nEnter your option: ");
    scanf ("%d", &option);
    while (option != -1)
    {
        switch (option)
        {
            case 1:
                create ();
                break;
            case 2:
                in_display (root);
                break;
            case 3: 
                pre_display (root);
                break;
            case 4:
                post_display (root);
                break;
            default:
                printf ("\nWrong input! Please try again!");
                break;
        }
        printf ("\nEnter you option again: ");
        scanf ("%d", &option);
    }
    return 0;
}

void create ()
{
    Node *new_node, *ptr; int option, num; int ans;
    new_node = (Node *) malloc (sizeof (Node));
    new_node -> right = NULL;
    new_node -> left = NULL;
    new_node -> up = NULL;
    printf ("\nEnter root data: ");
    scanf ("%d", &new_node -> data);
    root = new_node;
    ptr = root;
    printf ("\n*****SUB MENU*****");
    printf ("\n1. Insert a child.");
    printf ("\n2. Go to a child.");
    printf ("\n3. Go to parent.");
    printf ("\nEnter -1 to exit.");
    printf ("\nEnter your option: ");
    scanf ("%d", &option);
    while (1)
    {
        if (option == -1)
        {
            printf ("\nExiting sub menu...");
            break;
        }
        switch (option)
        {
            case 1:
                printf ("Enter data: ");
                scanf ("%d", &num);
                insert (ptr, num);
                break;
            case 2: 
                printf ("Left or Right? (1/2): ");
                scanf ("%d", &ans);
                if (ans == 2 && ptr -> right != NULL)
                    ptr = ptr -> right;
                else if (ans == 1 && ptr -> left != NULL)
                    ptr = ptr -> left;
                else 
                    printf ("\nNode doesn't exist.");
                break;
            case 3:
                ptr = ptr -> up;
                break;
            default:
                printf ("\nWrong input. Please try again!");
                break;
        }
        printf ("\nEnter your option again: ");
        scanf ("%d", &option);
    }
}

void insert (Node *ptr, int val)
{
    Node *new_node; int ans;
    new_node = (Node *) malloc (sizeof (Node));
    new_node -> data = val;
    new_node -> right = NULL; new_node -> left = NULL;
    new_node -> up = ptr;
    printf ("\nLeft or Right? (1/2): ");
    scanf ("%d", &ans);
    if (ans == 2 && ptr -> right == NULL)
    {
        ptr -> right = new_node;
    }
    else if (ans == 1 && ptr -> left == NULL)
    {
        ptr -> left = new_node;
    }
    else 
        printf ("\nNo more space. Please change the node.");
}

void in_display (Node *ptr)
{
    if (ptr == NULL)
	    return;
    printf ("%d\t", ptr -> data);
    in_display (ptr -> left);
    in_display (ptr -> right);
}

void pre_display (Node *ptr)
{
    if (ptr == NULL)
	    return;
    printf ("%d\t", ptr -> data);
    pre_display (ptr -> left);
    pre_display (ptr -> right);
}

void post_display (Node *ptr)
{
    if (ptr == NULL)
	    return;
    printf ("%d\t", ptr -> data);
    post_display (ptr -> left);
    post_display (ptr -> right);
} 
