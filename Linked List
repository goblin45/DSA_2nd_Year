#include <stdio.h>
#include <stdlib.h>

struct node {
    int DATA;
    node *NEXT;
};

struct node *START = NULL;
struct node *create_ll (struct node *);
struct node *insert_at_beg (struct node *);
struct node *insert_at_end (struct node *);
struct node *insert_at_any (struct node *);
struct node *delete_at_beg (struct node *);
struct node *delete_at_end (struct node *);
struct node *delete_at_any (struct node *);
void display_list (struct node *);

int main ()
{
    int num, option;
    printf ("\n**********MAIN MENU***********");
    printf ("\n1. Create list: ");
    printf ("\n2. Insert at beginning: ");
    printf ("\n3. Insert at end: ");
    printf ("\n4. Insert at any: ");
    printf ("\n5. Delete at beginning: ");
    printf ("\n6. Delete at end: ");
    printf ("\n7. Delete at any: ");
    printf ("\n8. Display the list: ");
    printf ("\nEnter -1 to exit.");
    printf ("\nEnter your option: ");
    scanf ("%d", &option);
    while (option != -1)
    {
        switch (option)
        {
            case 1:
                create_ll (START);
                break;
            case 2:
                insert_at_beg (START);
                break;
            case 3:
                insert_at_end (START);
                break;
            case 4:
                insert_at_any (START);
                break;
            case 5: 
                delete_at_beg (START);
                break;
            case 6:
                delete_at_end (START);
                break;
            case 7:
                delete_at_any (START);
                break;
            case 8:
                display_list (START);
                break;
            default:
                printf ("\nWrong input! Please try again!");
                break;
        }
        printf ("\nEnter your option again: ");
        scanf ("%d", &option);
    }
    return 0;
}

struct node *create_ll (START)
{
    struct node *new_node, *ptr;
    while (1)
    {
    if (START == NULL)
    {
        new_node = (struct node *) malloc (sizeof (struct node));
        printf ("\nEnter first data: ");
        scanf ("%d", &new_node -> DATA);
        new_node -> NEXT = NULL;
        START = new_node;
    }
    else 
    {
        ptr = START;
        while (ptr -> NEXT !=NULL)
        {
            ptr = ptr -> NEXT;
        }
        new_node = (struct node *) malloc (sizeof (struct node));
        printf ("\nEnter next data: ");
        scanf ("%d", &new_node -> DATA);
        if (new_node -> DATA == -1)
            break;
        else
        {
        new_node -> NEXT = NULL;
        ptr -> NEXT = new_node;
        }
    }
    }
    return START;    
}

struct node *insert_at_beg (START)
{
    struct node *new_node;
    new_node = (struct node *) malloc (sizeof (struct node));
    printf ("\nEnter data: ");
    scanf ("%d", &new_node -> DATA);
    new_node -> NEXT = START;
    START = new_node;
    return START;
}

struct node *insert_at_end (START)
{
    struct node *new_node, *ptr;
    ptr = START;
    while (ptr -> NEXT != NULL)
    {
        ptr = ptr -> NEXT;
    }
    new_node = (struct node *) malloc (sizeof (struct node));
    printf ("\nEnter data: ");
    scanf ("%d", &new_node -> DATA);
    new_node -> NEXT = NULL;
    ptr -> NEXT = new_node;
    return START;
}

struct node *insert_at_any (START)
{
    int num, neighbour, option;
    printf ("\n1. Insert before: ");
    scanf ("%d", &option);
    switch (option)
    {
        case 1:
            printf ("\n1. Enter neighbour and new data: ");
            scanf ("%d %d", &neighbour, &num);
            insert_before (neighbour, num);
            break;
        case 2:
             printf ("\n1. Enter neighbour and new data: ");
            scanf ("%d %d", &neighbour, &num);
            insert_after (neighbour, num);
            break;
        default:
            printf ("\nWrong input! Please try again!");
            break;
    }
}

struct node *delete_at_beg (START)
{
    struct node *ptr;
    ptr = START;
    START = ptr -> NEXT;
    free (ptr);
}

struct node *delete_at_end (START)
{
    struct node *ptr, *preptr;
    ptr = START;
    preptr = ptr;
    while (ptr -> NEXT != NULL)
    {
        ptr = ptr -> NEXT;
        preptr = preptr -> NEXT;
    }
    preptr -> NEXT = NULL;
    free (ptr);
}

void display (START)
{
    struct node *ptr;
    ptr = START;
    while (ptr -> NEXT!= NULL)
    {
        printf ("%d\t", ptr -> DATA);
        ptr = ptr -> NEXT;
    }
    printf ("%d", ptr -> DATA);
}
