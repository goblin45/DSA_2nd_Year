#include <stdio.h>
#include <stdlib.h>

typedef struct node {
    int DATA;
    struct node *NEXT;
} NODE;

NODE *START = NULL;
NODE *create (NODE *);
NODE *insert_at_beg (NODE *);
NODE *insert_at_end (NODE *);
NODE *insert_at_any (NODE *);
NODE *insert_before (NODE *, int, int);
NODE *insert_after (NODE *, int, int);
NODE *delete_at_beg (NODE *);
NODE *delete_at_end (NODE *);
NODE *delete_at_any (NODE *);
void polynomial (NODE *);
int count_node (NODE *);
void odd_even_print (NODE *);
int count = 0, *s;

void display (NODE *);

int main ()
{
    int num, option;
    printf ("\n**********MAIN MENU***********");
    printf ("\n1. Create list: ");
    printf ("\n2. Insert at beginning: ");
    printf ("\n3. Insert at end: ");
    printf ("\n4. Insert at any: ");
    printf ("\n5. Delete at beginning: ");
    printf ("\n6. Delete at end: ");
    printf ("\n7. Delete at any: ");
    printf ("\n8. Display the list: ");
    printf ("\n9. Print Polynomial: ");
    printf ("\n10. Count No. of nodes: ");
    printf ("\n11. Print Odd and Even nodes' lists: ");
    printf ("\nEnter -1 to exit.");
    printf ("\nEnter your option: ");
    scanf ("%d", &option);
    while (option != -1)
    {
        switch (option)
        {
            case 1:
                START = create (START);
                break;
            case 2:
                START = insert_at_beg (START);
                break;
            case 3:
                START = insert_at_end (START);
                break;
            case 4:
                START = insert_at_any (START);
                break;
            case 5: 
                START = delete_at_beg (START);
                break;
            case 6:
                START = delete_at_end (START);
                break;
            case 7:
                START = delete_at_any (START);
                break;
            case 8:
                display (START);
                break;
            case 9:
                polynomial (START);
                break;
            case 10:
                printf ("No. of nodes is: %d", count_node (START));
                break;
            case 11:    
                odd_even_print (START);
                break;
            default:
                printf ("\nWrong input! Please try again!");
                break;
        }
        printf ("\nEnter your option again: ");
        scanf ("%d", &option);
    }
    return 0;
}

NODE *create (NODE *START)
{
    NODE *new_node, *ptr;
    while (1)
    {
        if (START == NULL)
        {
            new_node = (NODE *) malloc (sizeof (NODE));
            printf ("\nEnter first data: ");
            scanf ("%d", &new_node -> DATA);
            new_node -> NEXT = NULL;
            START = new_node;
        }
        else 
        {
            ptr = START;
            while (ptr -> NEXT !=NULL)
            {
                ptr = ptr -> NEXT;
            }
            new_node = (NODE *) malloc (sizeof (NODE));
            printf ("\nEnter next data: ");
            scanf ("%d", &new_node -> DATA);
            if (new_node -> DATA == -1)
            {
                break;
                free (new_node); 
            }
            else
            {
                new_node -> NEXT = NULL;
                ptr -> NEXT = new_node;
            }
        }
    }
    return START;    
}

//problem 1

NODE *insert_at_beg (NODE *START)
{
    NODE *new_node;
    new_node = (NODE *) malloc (sizeof (NODE));
    printf ("\nEnter data: ");
    scanf ("%d", &new_node -> DATA);
    new_node -> NEXT = START;
    START = new_node;
    return START;
}

NODE *insert_at_end (NODE *START)
{
    NODE *new_node, *ptr;
    ptr = START;
    while (ptr -> NEXT != NULL)
    {
        ptr = ptr -> NEXT;
    }
    new_node = (NODE *) malloc (sizeof (NODE));
    printf ("\nEnter data: ");
    scanf ("%d", &new_node -> DATA);
    new_node -> NEXT = NULL;
    ptr -> NEXT = new_node;
    return START;
}

NODE *insert_at_any (NODE *START)
{
    int neighbour, num, option;
    printf ("\nEnter new data: ");
    scanf ("%d", &num);
    printf ("\n1. Insert before: ");
    printf ("\n2. Insert after: ");
    printf ("\nEnter your option: ");
    scanf ("%d", &option);
    switch (option)
    {
        case 1:
            printf ("\nEnter neighbour: ");
            scanf ("%d", &neighbour);
            START = insert_before (START, neighbour, num);
            break;
        case 2:
            printf ("\nEnter neighbour: ");
            scanf ("%d", &neighbour);
            START = insert_after (START, neighbour, num);
            break;
        default:
            printf ("\nWrong input! Please try again!");
            break;
    }
    return START;
}

NODE *insert_before (NODE *START, int neighbour, int num)
{
    NODE *new_node, *ptr, *preptr;
    new_node = (NODE *) malloc (sizeof (NODE));
    new_node -> DATA = num;
    preptr = START;
    ptr = preptr -> NEXT;
    if (START -> DATA == neighbour)
    {
        new_node -> NEXT = START;
        START = new_node;
    }
    else
    {
        while (ptr -> DATA != neighbour)
        {
            ptr = ptr -> NEXT;
            preptr = preptr -> NEXT;
        }
        new_node -> NEXT = ptr;
        preptr -> NEXT = new_node;
    }
    return START;
}

NODE *insert_after (NODE *START, int neighbour, int num)
{
    NODE *new_node, *ptr, *preptr;
    new_node = (NODE *) malloc (sizeof (NODE));
    new_node -> DATA = num;
    preptr = START;
    ptr = preptr -> NEXT;
    while (preptr -> DATA != neighbour)
    {
        preptr = preptr -> NEXT;
        ptr = ptr -> NEXT;
    }
    new_node -> NEXT = ptr;
    preptr -> NEXT = new_node;
    return START;
}

void display (NODE *START)
{
    NODE *ptr;
    ptr = START;
    if (ptr == NULL)
        printf ("\nThe list is empty!");
    else
    {
        while (ptr -> NEXT!= NULL)
        {
            printf ("%d\t", ptr -> DATA);
            ptr = ptr -> NEXT;
        }
        printf ("%d", ptr -> DATA);
    }
} 

//problem 2

NODE *delete_at_beg (NODE *START)
{
    NODE *ptr;
    ptr = START;
    if (START == NULL)
        printf ("\nList is empty! ");
    else 
    {
        START = START -> NEXT;
        free (ptr);
    }
    return START;
}

NODE *delete_at_end (NODE *START)
{
    NODE *ptr, *preptr;
    if (START == NULL)
        printf ("\nList is empty! ");
    else 
    {  
        preptr = START;
        ptr = preptr -> NEXT;
        while (ptr -> NEXT != NULL)
        {
            ptr = ptr -> NEXT;
            preptr = preptr -> NEXT;
        }
        preptr -> NEXT = NULL;
        free (ptr);
    }
    return START;
}

NODE *delete_at_any (NODE* START)
{
    int num; NODE *ptr, *preptr;
    printf ("\nEnter the value: ");
    scanf ("%d", &num);
    preptr = START;
    ptr = preptr -> NEXT;
    if (START -> DATA == num)
    {
        free (START);
        START = ptr;
    }
    else
    {
        while (ptr -> DATA != num)
        {
            if (ptr == NULL || ptr -> NEXT == NULL || START == NULL)
            {
                printf ("\nItem not found!");
                break;
            }
            else
            {
                ptr = ptr -> NEXT;
                preptr = preptr -> NEXT;
            }
        }
        if (ptr -> DATA == num && ptr -> NEXT == NULL)
        {
            preptr -> NEXT = NULL;
            free (ptr);
        }
        else 
        {
            preptr -> NEXT = ptr -> NEXT;
            free (ptr);
        }
    }
    return START;
}

//problem 4

void polynomial (NODE *START)
{
    int i = 0;
    NODE *ptr;
    s = (int *) malloc (count * sizeof (int));
    ptr = START;
    while (ptr != NULL)
    {
        *(s + i) = ptr -> DATA;
        ptr = ptr -> NEXT;
        i++;
    }
    for (i = count - 1; i > 0; i--)
    {
        printf ("%d x^%d   +   ", *(s + i), i);
    }
    printf ("%d", *s);
}

//problem 5

int count_node (NODE *START)
{
    NODE *ptr;
    ptr = START;
    if (START == NULL)
        return 0;
    while (ptr != NULL)
    {
        ptr = ptr -> NEXT;
        ++count;
    }
    return count;
}

//problem 6

void odd_even_print (NODE *START)
{
    NODE *ptr; int i = 1;
    ptr = START;
    printf ("\nThe odd list is: \n");
    while (ptr != NULL)
    {
        if (i % 2 !=  0)
            printf ("%d\t", ptr -> DATA);
        ptr = ptr -> NEXT;
        i++;
    }
    ptr = START; i = 1;
    printf ("\nThe even list is: \n");
    while (ptr != NULL)
    {
        if (i % 2 == 0)
            printf ("%d\t", ptr -> DATA);
        ptr = ptr -> NEXT;
        i++;
    }
}

// OUTPUT
// **********MAIN MENU***********
// 1. Create list: 
// 2. Insert at beginning: 
// 3. Insert at end: 
// 4. Insert at any: 
// 5. Delete at beginning: 
// 6. Delete at end: 
// 7. Delete at any: 
// 8. Display the list: 
// 9. Print Polynomial: 
// 10. Count No. of nodes: 
// 11. Print Odd and Even nodes' lists: 
// Enter -1 to exit.
// Enter your option: 1
// Enter first data: 1
// Enter next data: 2
// Enter next data: 3
// Enter next data: 4
// Enter next data: 5
// Enter next data: -1
// Enter your option again: 8
// 1	2	3	4	5
// Enter your option again: 2
// Enter data: 0
// Enter your option again: 3
// Enter data: 6
// Enter your option again: 8
// 0	1	2	3	4	5	6
// Enter your option again: 4
// Enter new data: 7
// 1. Insert before: 
// 2. Insert after: 
// Enter your option: 1
// Enter neighbour: 4
// Enter your option again: 4
// Enter new data: 8
// 1. Insert before: 
// 2. Insert after: 
// Enter your option: 2
// Enter neighbour: 5
// Enter your option again: 8
// 0	1	2	3	7	4	5	8	6
// Enter your option again: 5
// Enter your option again: 8
// 1	2	3	7	4	5	8	6
// Enter your option again: 6
// Enter your option again: 8
// 1	2	3	7	4	5	8
// Enter your option again: 7
// Enter the value: 7
// Enter your option again: 8
// 1	2	3	4	5	8
// Enter your option again: 10
// No. of nodes is: 6
// Enter your option again: 9
// 8 x^5   +   5 x^4   +   4 x^3   +   3 x^2   +   2 x^1   +   1
// Enter your option again: 11
// The odd list is: 
// 1	3	5	
// The even list is: 
// 2	4	8	
// Enter your option again: -1
//
